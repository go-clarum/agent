syntax = "proto3";

option go_package = "github.com/go-clarum/agent/api/http";

service HttpService {
  rpc InitClientEndpoint(InitializeClientRequest) returns (InitializeClientResponse) {}
  rpc InitServerEndpoint(InitializeServerRequest) returns (InitializeServerResponse) {}

  rpc ClientSendAction(ClientSendActionRequest) returns (ClientSendActionResponse) {}
  rpc ClientReceiveAction(ClientReceiveActionRequest) returns (ClientReceiveActionResponse) {}

  rpc ServerSendAction(ServerSendActionRequest) returns (ServerSendActionResponse) {}
  rpc ServerReceiveAction(ServerReceiveActionRequest) returns (ServerReceiveActionResponse) {}
}

message InitializeClientRequest {
  string name = 1;
  string base_url = 2;
  string content_type = 3;
  int32 timeout_seconds = 4;
}
message InitializeClientResponse {
  string error = 1;
}

message InitializeServerRequest {
  string name = 1;
  int32 port = 2;
  string content_type = 3;
  int32 timeout_seconds = 4;
}
message InitializeServerResponse {
  string error = 1;
}

message ClientSendActionRequest {
  string name = 1;
  string url = 2;
  string path = 3;
  string method = 4;
  map<string, StringsList> query_params = 5;
  map<string, string> headers = 6;
  string payload = 7;
  string endpoint_name = 8;
}
message ClientSendActionResponse {
  string error = 1;
}

message ClientReceiveActionRequest {
  string name = 1;
  PayloadType payloadType = 2;
  int32 statusCode = 3;
  map<string, string> headers = 4;
  string payload = 5;
  string endpointName = 6;
}
message ClientReceiveActionResponse {
  string error = 1;
}

message ServerSendActionRequest {
  string name = 1;
}
message ServerSendActionResponse {
  string error = 1;
}

message ServerReceiveActionRequest {
  string name = 1;
}
message ServerReceiveActionResponse {
  string error = 1;
}

// Types

message StringsList {
  repeated string values = 1;
}

enum PayloadType {
  Plaintext = 0;
  Json = 1;
}
